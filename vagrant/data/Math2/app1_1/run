#!/bin/python3
# -*- coding: utf-8 -*-

# Ce fichier doit être utilisé pour un exercice de type 'random'

import re
import math
from sympy import sympify, simplify
from sympy.parsing.latex import parse_latex
from inginious import input, feedback, rst

par1 = 100*int(input.get_input("@random")[0]*10+1)
par2 = round(1 + int(input.get_input("@random")[1]*100)/100, 2)
p = 1+par2/100

correct1 = str(math.ceil(math.log(2)/math.log(1+par2/100)))

grade = 0

def parse_equation(latex_str):
    # The \left and \right prefix are not supported by sympy (and useless for treatment)
    latex_str = re.sub("(\\\left|\\\\right)", "", latex_str)
    return parse_latex(latex_str)

def is_equal(eq1, eq2):
    return simplify(eq1) == simplify(eq2) or simplify(sympify(str(eq1))) == simplify(sympify(str(eq2)))

try:
    student_answer1 = parse_equation(str(input.get_input("q1")[0]))
    correct_answer1 = parse_equation(correct1)
except LaTeXParsingError as e:
    feedback.set_global_result("failed")
    feedback.set_global_feedback("parsing error")

res1 = is_equal(student_answer1, correct_answer1)

if res1:
    feedback.set_problem_result("success","q1")
    grade += 100
else:
    feedback.set_problem_result("failed","q1")
    feedback.set_problem_feedback("Mauvaise réponse.","q1")


feedback.set_grade(grade)
if grade == 100:
    feedback.set_global_result("success")
    fun = "{}*Math.pow({},x)".format(par1,p)
    bb = "{},{},{},{}".format(-math.ceil(math.log(2)/math.log(1+par2/100))*0.1,
                             2.2*par1,
                             math.ceil(math.log(2)/math.log(1+par2/100))*1.1,
                             -0.2*par1)
    dom = "0,{}".format(2*math.ceil(math.log(2)/math.log(1+par2/100)))
    line = str(2*par1)
    point = "{},{}".format(math.log(2)/math.log(1+par2/100), 2*par1)
    feedback.set_problem_feedback(".. raw:: html\n\n\t<div id='jxgbox1' class='jxgbox mb-3' style='width:600px; height:600px;'></div>\n\t<script type='text/javascript'>\n\tvar b = JXG.JSXGraph.initBoard('jxgbox1', {boundingbox: ["+bb+"], axis: true});\n\tb.create('functiongraph', [function(x){return "+fun+";},"+dom+"]);\n\tb.create('line', [[0,"+line+"], [100,"+line+"]], {dash:2,strokeWidth:1});\n\tb.create('point', ["+point+"], {name:\"\"});\n\t</script>","q1")
else:
    feedback.set_global_result("failed")
    feedback.set_global_feedback("Une de vos réponses n'est pas correcte")