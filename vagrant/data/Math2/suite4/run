#!/bin/python3
# -*- coding: utf-8 -*-

# Ce fichier doit être utilisé pour un exercice de type 'random'

import re
import math
from sympy import sympify, simplify
from sympy.parsing.latex import parse_latex
from inginious import input, feedback, rst

eco = 10*int(input.get_input("@random")[0]*10+5)
n = int(input.get_input("@random")[1]*3+2)

correct1 = str(6*eco*n)
init = 6*eco*n

grade = 0

def parse_equation(latex_str):
    # The \left and \right prefix are not supported by sympy (and useless for treatment)
    latex_str = re.sub("(\\\left|\\\\right)", "", latex_str)
    return parse_latex(latex_str)

def is_equal(eq1, eq2):
    return simplify(eq1) == simplify(eq2) or simplify(sympify(str(eq1))) == simplify(sympify(str(eq2)))

try:
    student_answer1 = parse_equation(str(input.get_input("q1")[0]))
    correct_answer1 = parse_equation(correct1)
except LaTeXParsingError as e:
    feedback.set_global_result("failed")
    feedback.set_global_feedback("parsing error")

res1 = is_equal(student_answer1, correct_answer1)

if res1:
    feedback.set_problem_result("success","q1")
    feedback.set_problem_feedback("Bravo!","q1")
    grade += 100
else:
    feedback.set_problem_result("failed","q1")
    feedback.set_problem_feedback("Mauvaise réponse.","q1")


feedback.set_grade(grade)
if grade == 100:
    feedback.set_global_result("success")
    fun = "{}+(2*{}*x/{})".format(init,init,n)
    bb = "{},{},{},{}".format(-0.1*n,
                             3.3*init,
                             1.1*n,
                             -0.3*init)
    dom = "{},{}".format(0,n*2)
    line1 = str(init)
    line2 = str(2*init)
    line3 = str(3*init)
    line4 = str(n)
    point1 = "{},{}".format(0,init)
    point2 = "{},{}".format(n,3*init)
    feedback.set_problem_feedback(".. raw:: html\n\n\t<div id='jxgbox1' class='jxgbox mb-3' style='width:600px; height:600px;'></div>\n\t<script type='text/javascript'>\n\tvar b = JXG.JSXGraph.initBoard('jxgbox1', {boundingbox: ["+bb+"], axis: true});\n\tb.create('functiongraph', [function(x){return "+fun+";},"+dom+"], {name:'economie'});\n\tb.create('line', [[0,"+line1+"], [100,"+line1+"]], {dash:2,strokeWidth:1});\n\tb.create('line', [[0,"+line2+"], [100,"+line2+"]], {dash:2,strokeWidth:1});\n\tb.create('line', [[0,"+line3+"], [100,"+line3+"]], {dash:2,strokeWidth:1});\n\tb.create('line', [["+line4+",0], ["+line4+",1000]], {dash:2,strokeWidth:1});\n\tb.create('point', ["+point1+"], {name:\"\"});\n\tb.create('point', ["+point2+"], {name:\"\"});\n\t</script>","q1")
else:
    feedback.set_global_result("failed")
    feedback.set_global_feedback("Une de vos réponses n'est pas correcte")