# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/ubuntu2004"
  config.vm.hostname= "inginious"
  config.vm.provider "virtualbox" do |v|
    v.gui = false
    v.name = "inginious"
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 80, host: 7070

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     vb.gui = false
  
     # Customize the amount of memory on the VM:
     vb.memory = "1024"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     apt-get update
     apt-get install -y apache2
     curl -fsSL https://get.docker.com/ | sh
     apt-get install git mongodb gcc tidy python3 python3-pip python3-dev -y
     #systemctl start mongodb
     #systemctl enable mongodb
     #systemctl start docker
     #systemctl enable docker
     pip3 install --upgrade git+https://github.com/UCL-INGI/INGInious.git@v0.7 
     mkdir /var/www/html/inginious_courses
     mkdir /var/www/html/agent_tmp
     mkdir /var/www/html/inginious_bkp
     cp /vagrant_data/configuration.yaml /var/www/html/
     cp /vagrant_data/inginious.conf /etc/apache2/sites-available/
     ln -s /etc/apache2/sites-available/inginious.conf  /etc/apache2/sites-enabled/inginious.conf
     apt install apache2-dev -y
     pip3 install mod_wsgi
     a2enmod rewrite
     a2dismod rewrite
     echo "export INGINIOUS_WEBAPP_CONFIG="/var/www/html/configuration.yaml"" >> /etc/apache2/envvars
     echo "export INGINIOUS_WEBAPP_HOST="0.0.0.0"" >> /etc/apache2/envvars
     echo "export INGINIOUS_WEBAPP_PORT="80"" >> /etc/apache2/envvars
     /etc/init.d/apache2 restart
  SHELL
end
